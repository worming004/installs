export ZSH="$HOME/.oh-my-zsh"
ZSH_THEME="essembeh"

plugins=(alias-finder ansible archlinux argocd asdf docker docker-compose dotnet emoji git gitignore golang helm istioctl kubectl minikube oc ssh-agent systemd terraform thefuck tmux wd web-search zsh-autosuggestions zsh-syntax-highlighting)

source $ZSH/oh-my-zsh.sh
source $HOME/.alias
source $HOME/.functions.sh

ENCORE_PATH=$PATH:/home/worming/.encore

PATH=$PATH:$(go env GOPATH)/bin/
PATH=$PATH:$HOME/.cargo/bin
PATH=$PATH:$HOME/.local/bin/
PATH=$PATH:$HOME/bin/
PATH=$PATH:/var/lib/snapd/snap/bin
PATH=$PATH:$HOME/.dotnet/tools/
PATH=$PATH:$HOME/.local/share/nvim/mason/bin
PATH=$PATH:$ENCORE_PATH/bin

# tmux
SHELL=$(which zsh)

# bash compatibilty
autoload -U +X compinit && compinit
autoload -U +X bashcompinit && bashcompinit

. "$HOME/.asdf/asdf.sh"
. "$HOME/.asdf/completions/asdf.bash"
export HISTSIZE=1000000000
export SAVEHIST=$HISTSIZE
setopt EXTENDED_HISTORY


_dotnet_zsh_complete() 
{
  local completions=("$(dotnet complete "$words")")

  # If the completion list is empty, just continue with filename selection
  if [ -z "$completions" ]
  then
    _arguments '*::arguments: _normal'
    return
  fi

  # This is not a variable assignment, don't remove spaces!
  _values = "${(ps:\n:)completions}"
}

compdef _dotnet_zsh_complete dotnet

# Ensure glob expression works like bash
setopt extended_glob

command_exists() {
  command -v "$1" >/dev/null 2>&1
}

register_zsh_completion_cobra_style() {
  local tool="$1"
  if command_exists "$tool"; then
      source <("$tool" completion zsh)
  fi
}

cobra_tools=("podman", "operator-sdk", "skaffold", "opa", "glow", "kubebuilder", "ko", "dapr", "argocd", "kn", "kn-quickstart", "kube-linter", "encore")

for tool in "${cobra_tools[@]}"; do
  register_zsh_completion_cobra_style "$tool"
done

if command_exists "gh"; then
  eval "$(gh completion -s zsh)"
fi

function nginx_here() {
  podman run -p 8080:80 -v $(pwd):/usr/share/nginx/html:ro -d --name nginx-here nginx
}

export KUBE_EDITOR="nvim"

source ~/.dldockerfile

function start_sql_server {
  if [ -z $CONTAINER_ENGINE ]
  then
    CONTAINER_ENGINE=docker
  fi

  $CONTAINER_ENGINE container inspect sqlserver
  if [ $? -eq 0 ]
  then
    $CONTAINER_ENGINE run -m 2g --cpus=2 -e "ACCEPT_EULA=Y" -e "MSSQL_SA_PASSWORD=yourStrong(*)Password" -p 1433:1433 -d --name sqlserver mcr.microsoft.com/mssql/server:2022-latest
  fi
}
